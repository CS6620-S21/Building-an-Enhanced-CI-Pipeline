name: Continuous Integration Pipeline
'on': pull_request
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: gke-testing-cluster
  GKE_ZONE: us-central1
  DEPLOYMENT_NAME: gke-test
  IMAGE: static-site
jobs:
  # formatting-check:
  #   name: Formatting Check
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: run YAPF to test if python code is correctly formatted
  #     uses: AlexanderMelde/yapf-action@master
  #     with:
  #       args: --verbose

  # pyTest:
  #   name: Unit Test - PyTest
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Setting up Python 3.6
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.6
  #     - name: Installing Python dependencies from requirements.txt
  #       uses: py-actions/py-dependency-install@v2
  #       with:
  #         path: ./requirements.txt
  #     - name: Testing with PyTest
  #       run: >
  #         python3 -m pytest -rsA tests/ -vv --cov-fail-under=99 -W
  #         ignore::DeprecationWarning

  # setup-build-publish-deploy:
  #   # needs: [formatting-check, pyTest]
  #   name: Setup, Build, Publish, and Deploy
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2

  #   # Setup gcloud CLI
  #   - uses: google-github-actions/setup-gcloud@master
  #     with:
  #       version: '331.0.0'
  #       service_account_key: ${{ secrets.GKE_SA_KEY }}
  #       project_id: ${{ secrets.GKE_PROJECT }}

  #   # Configure Docker to use the gcloud command-line tool as a credential
  #   # helper for authentication

  #   - run: |-
  #       gcloud --quiet auth configure-docker
  #   # - run: |-
  #   #     gcloud container clusters create-auto "$GKE_CLUSTER" --region "$GKE_ZONE"
  #   - uses: google-github-actions/get-gke-credentials@main
  #     with:
  #       cluster_name: ${{ env.GKE_CLUSTER }}
  #       location: ${{ env.GKE_ZONE }}
  #       credentials: ${{ secrets.GKE_SA_KEY }}
  #   # Build the Docker image
  #   - name: Build
  #     run: |-
  #       docker build \
  #         --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
  #         --build-arg GITHUB_SHA="$GITHUB_SHA" \
  #         --build-arg GITHUB_REF="$GITHUB_REF" \
  #         .
  #   # Push the Docker image to Google Container Registry
  #   - name: Publish
  #     run: |-
  #       docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
  #   # Set up kustomize
  #   - name: Set up Kustomize
  #     run: |-
  #       curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
  #       chmod u+x ./kustomize
  #   # Deploy the Docker image to the GKE cluster
  #   - name: Deploy
  #     run: |-
  #       ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
  #       ./kustomize build . | kubectl apply -f -
  #       kubectl rollout status deployment/$DEPLOYMENT_NAME
  #       kubectl get services -o wide

#   wait:
#     needs: setup-build-publish-deploy
#     name: Wait 5 minutes before running integration environment
#     runs-on: ubuntu-latest
#     steps:
#       - uses: jakejarvis/wait-action@master
#         with:
#           time: '5m'

  run-integration-tests:
    # needs: setup-build-publish-deploy
    name: run the integration tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@master
      with:
        version: '332.0.0'
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication

    - run: |-
        gcloud --quiet auth configure-docker
    - uses: google-github-actions/get-gke-credentials@main
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
    - name: Build
      run: |-
        cd selenium_test
        docker build \
          --tag "gcr.io/$PROJECT_ID/selenium/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/selenium/$IMAGE:$GITHUB_SHA"
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        cd selenium_test
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    - name: Deploy
      run: |-
        cd selenium_test
        ./kustomize edit set image gcr.io/PROJECT_ID/selenium/IMAGE:TAG=gcr.io/$PROJECT_ID/selenium/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl get services -o wide

    - name: Selenium_test log
      run: |-
        pods=$(kubectl get pods --selector=job-name=gke-test-selenium --output=jsonpath='{.items[*].metadata.name}')
        kubectl wait --for=condition=complete job/gke-test-selenium --timeout=240s &
        completion_pid=$!
        kubectl wait --for=condition=failed job/gke-test-selenium --timeout=240s && exit 1 &
        failure_pid=$! 
        kubectl wait --for=condition=ContainersReady pods/$pods --timeout=240s
        kubectl logs --follow job/gke-test-selenium
        wait -n $completion_pid $failure_pid
        exit_code=$?
        kubectl delete job/gke-test-selenium
        exit $exit_code


  # run-integration-tests:
  #   needs: wait
  #   name: run the integration tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Setting up Python 3.6
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.6
  #     - name: Installing Python dependencies from requirements.txt
  #       uses: py-actions/py-dependency-install@v2
  #       with:
  #         path: ./selenium_test/requirements.txt
  #     - name: setup-firefox
  #       uses: browser-actions/setup-firefox@latest
  #       # run: firefox --version
  #     - name: setup-geckodriver
  #       uses: browser-actions/setup-geckodriver@latest
  #       # run: geckodriver --version
  #     - name: Testing with selenium
  #       run: >
  #         python3 selenium_test.py
  #       working-directory: ./selenium_test

  # run-load-tests:
  #   needs: wait
  #   name: run the load tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Run Load Test
  #       uses: apardo04/locust-github-action@master
  #       with:
  #         LOCUSTFILE: "./load_test/locustfile.py"
  #         URL:  "http://34.102.157.148/"
  #         USERS: "500"
  #         RATE: "10"
  #         RUNTIME: "30s"

  # delete-cluster:
  #     if: ${{ false == cancelled() }}
  #     needs: run-integration-tests
  #     name: delete-cluster-environment
  #     runs-on: ubuntu-latest
  #     steps:
  #     - uses: google-github-actions/setup-gcloud@master
  #       with:
  #         version: '331.0.0'
  #         service_account_key: ${{ secrets.GKE_SA_KEY }}
  #         project_id: ${{ secrets.GKE_PROJECT }}
  #     - uses: google-github-actions/get-gke-credentials@main
  #       with:
  #         cluster_name: ${{ env.GKE_CLUSTER }}
  #         location: ${{ env.GKE_ZONE }}
  #         credentials: ${{ secrets.GKE_SA_KEY }}
  #     - name: delete-cluster-gke
  #       run : |-
  #         gcloud container clusters delete --quiet "$GKE_CLUSTER" --region "$GKE_ZONE"
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2
#     # Setup gcloud CLI
#     - uses: google-github-actions/setup-gcloud@master
#       with:
#         version: '331.0.0'
#         service_account_key: ${{ secrets.GKE_SA_KEY }}
#         project_id: ${{ secrets.GKE_PROJECT }}

#     # Configure Docker to use the gcloud command-line tool as a credential
#     # helper for authentication

#     - run: |-
#         gcloud --quiet auth configure-docker
# #     - run: |-
# #         gcloud container clusters create-auto "$GKE_CLUSTER" --region us-central1
#     # Get the GKE credentials so we can deploy to the cluster
# #     - run: |-
# #         gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
#     - uses: google-github-actions/get-gke-credentials@main
#       with:
#         cluster_name: ${{ env.GKE_CLUSTER }}
#         location: ${{ env.GKE_ZONE }}
#         credentials: ${{ secrets.GKE_SA_KEY }}
#     - name: Build
#       run: |-
#         docker build \
#           --tag "gcr.io/$PROJECT_ID/selenium/$IMAGE:$GITHUB_SHA" \
#           --build-arg GITHUB_SHA="$GITHUB_SHA" \
#           --build-arg GITHUB_REF="$GITHUB_REF" \
#           selenium_test
#     - name: Publish
#       run: |-
#         docker push "gcr.io/$PROJECT_ID/selenium/$IMAGE:$GITHUB_SHA"
#     # Set up kustomize
#     - name: Set up Kustomize
#       run: |-
#         curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#         chmod u+x ./kustomize
#     - name: Deploy
#       env:
#         PROJECT_ID: ${{ secrets.GKE_PROJECT }}
#         IMAGE: static-site
#       run: |-
#         ./kustomize edit set image selenium-test=gcr.io/$PROJECT_ID/selenium/$IMAGE:$GITHUB_SHA
#         ./kustomize build selenium_test | kubectl apply -f -
#         kubectl rollout status deployment/$DEPLOYMENT_NAME
#         kubectl get services -o wide
        

