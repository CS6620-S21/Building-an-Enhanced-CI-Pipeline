name: Continuous Integration Pipeline
'on': pull_request
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: gke-testing-cluster
  GKE_ZONE: us-central1
  DEPLOYMENT_NAME: gke-test
  IMAGE: static-site
jobs:
  formatting:
    name: Autoyapf PEP-8 Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: '${{ github.head_ref }}'
      - name: Importing formatting
        uses: mritunjaysharma394/autoyapf@v2
        with:
          args: '--style pep8 --recursive --in-place .'
      - name: Checking for modified files
        run: >-
          echo ::set-output name=modified::$(if git diff-index --quiet HEAD --;
          then echo "false"; else echo "true"; fi)
      - name: Pushing changes
        if: steps.git-check.outputs.modified == 'true'
        run: >
          git config --global user.name github-actions
          git config --global user.email
          '${GITHUB_ACTOR}@users.noreply.github.com'  
          git remote set-url origin https://x-access-token:${{
          secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git commit -am "Automated autoyapf fixes"
          git push
  pyTest:
    needs: formatting
    name: Unit Test - PyTest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setting up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Installing Python dependencies from requirements.txt
        uses: py-actions/py-dependency-install@v2
        with:
          path: ./requirements.txt
      - name: Testing with PyTest
        run: >
          python3 -m pytest -rsA tests/ -vv --cov-fail-under=90 -W
          ignore::DeprecationWarning
#   setup-build-publish-deploy:
#     needs: pyTest
#     name: Setup, Build, Publish, and Deploy
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2

#     # Setup gcloud CLI
#     - uses: google-github-actions/setup-gcloud@master
#       with:
#         version: '331.0.0'
#         service_account_key: ${{ secrets.GKE_SA_KEY }}
#         project_id: ${{ secrets.GKE_PROJECT }}

#     # Configure Docker to use the gcloud command-line tool as a credential
#     # helper for authentication

#     - run: |-
#         gcloud --quiet auth configure-docker
# #     - run: |-
# #         gcloud container clusters create-auto "$GKE_CLUSTER" --region us-central1
#     # Get the GKE credentials so we can deploy to the cluster
# #     - run: |-
# #         gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
#     - uses: google-github-actions/get-gke-credentials@main
#       with:
#         cluster_name: ${{ env.GKE_CLUSTER }}
#         location: ${{ env.GKE_ZONE }}
#         credentials: ${{ secrets.GKE_SA_KEY }}
#     # Build the Docker image
#     - name: Build
#       run: |-
#         docker build \
#           --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
#           --build-arg GITHUB_SHA="$GITHUB_SHA" \
#           --build-arg GITHUB_REF="$GITHUB_REF" \
#           .
#     # Push the Docker image to Google Container Registry
#     - name: Publish
#       run: |-
#         docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
#     # Set up kustomize
#     - name: Set up Kustomize
#       run: |-
#         curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#         chmod u+x ./kustomize
#     # Deploy the Docker image to the GKE cluster
#     - name: Deploy
#       run: |-
#         ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
#         ./kustomize build . | kubectl apply -f -
#         kubectl rollout status deployment/$DEPLOYMENT_NAME
#         kubectl get services -o wide

  run-integration-tests:
    needs: pyTest
    name: run the integration tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@master
      with:
        version: '331.0.0'
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication

    - run: |-
        gcloud --quiet auth configure-docker
#     - run: |-
#         gcloud container clusters create-auto "$GKE_CLUSTER" --region us-central1
    # Get the GKE credentials so we can deploy to the cluster
#     - run: |-
#         gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
    - uses: google-github-actions/get-gke-credentials@main
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/selenium/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          selenium_test
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/selenium/$IMAGE:$GITHUB_SHA"
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        pushd selenium_test
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x kustomize
    - name: Deploy
      env:
        PROJECT_ID: ${{ secrets.GKE_PROJECT }}
        IMAGE: static-site
      run: |-
        kustomize edit set image gcr.io/PROJECT_ID/selenium/IMAGE:TAG=gcr.io/$PROJECT_ID/selenium/$IMAGE:$GITHUB_SHA
        kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
        popd
