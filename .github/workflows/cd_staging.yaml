name: Continuous Deployment Pipeline Staging Env
on:
  push:
    branches:
      - main
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: gke-testing-cluster
  GKE_ZONE: us-central1
  DEPLOYMENT_NAME: gke-test-staging
  IMAGE: static-site
jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@master
      with:
        version: '331.0.0'
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication

    - run: |-
        gcloud --quiet auth configure-docker
    # - run: |-
    #     gcloud container clusters create-auto "$GKE_CLUSTER" --region "$GKE_ZONE"
    - uses: google-github-actions/get-gke-credentials@main
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        cd staging_service
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        cd staging_service
        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
  
  run-integration-tests:
    needs: setup-build-publish-deploy
    name: run the integration tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@master
      with:
        version: '332.0.0'
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication

    - run: |-
        gcloud --quiet auth configure-docker
    - uses: google-github-actions/get-gke-credentials@main
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
    - name: Build
      run: |-
        cd selenium_test_staging
        docker build \
          --tag "gcr.io/$PROJECT_ID/selenium_staging/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/selenium_staging/$IMAGE:$GITHUB_SHA"
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        cd selenium_test_staging
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    - name: Deploy
      run: |-
        cd selenium_test_staging
        ./kustomize edit set image gcr.io/PROJECT_ID/selenium_staging/IMAGE:TAG=gcr.io/$PROJECT_ID/selenium_staging/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl get services -o wide
    - name: Selenium_test log
      run: |-
        pods=$(kubectl get pods --selector=job-name=gke-test-selenium-staging --output=jsonpath='{.items[*].metadata.name}')
        kubectl wait --for=condition=complete job/gke-test-selenium-staging --timeout=240s &
        completion_pid=$!
        kubectl wait --for=condition=failed job/gke-test-selenium-staging --timeout=240s && exit 1 &
        failure_pid=$! 
        kubectl wait --for=condition=ContainersReady pods/$pods --timeout=240s
        kubectl logs --follow job/gke-test-selenium-staging
        wait -n $completion_pid $failure_pid
        exit_code=$?
        exit $exit_code
  
  run-load-tests:
    if: ${{ always() }}
    needs: run-integration-tests
    name: run load tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@master
      with:
        version: '331.0.0'
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication

    - run: |-
        gcloud --quiet auth configure-docker
    - uses: google-github-actions/get-gke-credentials@main
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
    - name: Build
      run: |-
        cd load_test_staging
        docker build \
          --tag "gcr.io/$PROJECT_ID/load_staging/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/load_staging/$IMAGE:$GITHUB_SHA"
    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        cd load_test_staging
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    - name: Deploy
      run: |-
        cd load_test_staging
        ./kustomize edit set image gcr.io/PROJECT_ID/load_staging/IMAGE:TAG=gcr.io/$PROJECT_ID/load_staging/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        kubectl get services -o wide
    - name: load_test_log
      run: |-
        pods=$(kubectl get pods --selector=job-name=gke-test-load-staging --output=jsonpath='{.items[*].metadata.name}')
        kubectl wait --for=condition=complete job/gke-test-load-staging --timeout=240s &
        completion_pid=$!
        kubectl wait --for=condition=failed job/gke-test-load-staging --timeout=240s && exit 1 &
        failure_pid=$! 
        kubectl wait --for=condition=ContainersReady pods/$pods --timeout=240s
        kubectl logs --follow job/gke-test-load-staging
        wait -n $completion_pid $failure_pid
        exit_code=$?
        exit $exit_code
  
  delete-service:
    if: ${{ always() }}
    needs: [run-load-tests]
    name: delete-cluster-environment
    runs-on: ubuntu-latest
    steps:
    - uses: google-github-actions/setup-gcloud@master
      with:
        version: '331.0.0'
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}
    - uses: google-github-actions/get-gke-credentials@main
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
    - name: delete-service-gke
      run : |-
          kubectl delete deployment gke-test-staging
          kubectl delete job/gke-test-load-staging
          kubectl delete job/gke-test-selenium-staging
          kubectl delete service gke-test-staging-service-backend
